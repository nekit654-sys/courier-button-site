import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';

interface User {
  id: number;
  full_name: string;
  email?: string;
  phone?: string;
  city?: string;
}

interface ProfileSetupModalProps {
  user: User;
  token: string;
  onComplete: () => void;
  onUpdateUser?: (userData: Partial<User>) => void;
}

export default function ProfileSetupModal({ user, token, onComplete, onUpdateUser }: ProfileSetupModalProps) {
  const [formData, setFormData] = useState({
    full_name: user.full_name || '',
    phone: user.phone || '',
    city: user.city || '',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const isProfileComplete = user.phone && user.city && user.full_name;

  useEffect(() => {
    if (isProfileComplete) {
      onComplete();
    }
  }, [isProfileComplete]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.full_name.trim()) {
      newErrors.full_name = '–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (formData.full_name.trim().split(' ').length < 2) {
      newErrors.full_name = '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)';
    }

    const phoneDigits = formData.phone.replace(/\D/g, '');
    if (!formData.phone.trim()) {
      newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (phoneDigits.length < 11) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä)';
    }

    if (!formData.city.trim()) {
      newErrors.city = '–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
      return;
    }

    setIsSubmitting(true);
    try {
      const response = await fetch('https://functions.poehali.dev/5f6f6889-3ab3-49f0-865b-fcffd245d858?route=profile&action=update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-Id': user.id.toString(),
        },
        body: JSON.stringify({
          full_name: formData.full_name.trim(),
          phone: formData.phone.replace(/\D/g, ''),
          city: formData.city.trim(),
        }),
      });

      const data = await response.json();

      if (data.success) {
        toast.success('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω!');
        
        const updatedData = {
          full_name: formData.full_name.trim(),
          phone: formData.phone.replace(/\D/g, ''),
          city: formData.city.trim(),
        };
        
        if (onUpdateUser) {
          onUpdateUser(updatedData);
        }
        
        onComplete();
      } else {
        toast.error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
      }
    } catch (error) {
      console.error('Profile update error:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å');
    } finally {
      setIsSubmitting(false);
    }
  };

  const formatPhoneInput = (value: string) => {
    const digits = value.replace(/\D/g, '');
    
    if (digits.length === 0) return '';
    if (digits.length <= 1) return `+7 (${digits}`;
    if (digits.length <= 4) return `+7 (${digits.slice(1, 4)}`;
    if (digits.length <= 7) return `+7 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}`;
    if (digits.length <= 9) return `+7 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7, 9)}`;
    return `+7 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7, 9)}-${digits.slice(9, 11)}`;
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhoneInput(e.target.value);
    setFormData({ ...formData, phone: formatted });
    if (errors.phone) setErrors({ ...errors, phone: '' });
  };

  if (isProfileComplete) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-white/20 rounded-full">
              <Icon name="UserCog" size={32} />
            </div>
            <div>
              <CardTitle className="text-2xl">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</CardTitle>
              <CardDescription className="text-blue-100">
                –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–ª–∞—Ç
              </CardDescription>
            </div>
          </div>
        </CardHeader>

        <CardContent className="pt-6">
          <div className="mb-6 p-4 bg-yellow-50 border-2 border-yellow-300 rounded-lg">
            <div className="flex items-start gap-3">
              <Icon name="AlertTriangle" size={24} className="text-yellow-600 flex-shrink-0 mt-0.5" />
              <div className="text-sm text-yellow-900">
                <p className="font-bold mb-2">‚ö†Ô∏è –í–ê–ñ–ù–û! –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¢–û–ß–ù–û –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ:</p>
                <ul className="space-y-1 list-disc list-inside ml-4">
                  <li><strong>–§–ò–û</strong> ‚Äî –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)</li>
                  <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω</strong> ‚Äî —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä, —á—Ç–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ</li>
                  <li><strong>–ì–æ—Ä–æ–¥</strong> ‚Äî —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ</li>
                </ul>
                <p className="mt-2 font-medium text-red-700">
                  üìå –û—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–µ—Ä–∫–∞ –≤—ã–ø–ª–∞—Ç!
                </p>
              </div>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <Label htmlFor="full_name" className="text-base font-semibold flex items-center gap-2">
                <Icon name="User" size={18} className="text-blue-600" />
                –§–ò–û (–∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ)
              </Label>
              <Input
                id="full_name"
                type="text"
                value={formData.full_name}
                onChange={(e) => {
                  setFormData({ ...formData, full_name: e.target.value });
                  if (errors.full_name) setErrors({ ...errors, full_name: '' });
                }}
                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                className={`mt-2 text-lg ${errors.full_name ? 'border-red-500' : ''}`}
                disabled={isSubmitting}
              />
              {errors.full_name && (
                <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                  <Icon name="XCircle" size={14} />
                  {errors.full_name}
                </p>
              )}
              <p className="text-xs text-gray-500 mt-1 flex items-center gap-1">
                <Icon name="Info" size={12} />
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –§–ò–û
              </p>
            </div>

            <div>
              <Label htmlFor="phone" className="text-base font-semibold flex items-center gap-2">
                <Icon name="Phone" size={18} className="text-green-600" />
                –¢–µ–ª–µ—Ñ–æ–Ω (–∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ)
              </Label>
              <Input
                id="phone"
                type="tel"
                value={formData.phone}
                onChange={handlePhoneChange}
                placeholder="+7 (XXX) XXX-XX-XX"
                className={`mt-2 text-lg font-mono ${errors.phone ? 'border-red-500' : ''}`}
                disabled={isSubmitting}
              />
              {errors.phone && (
                <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                  <Icon name="XCircle" size={14} />
                  {errors.phone}
                </p>
              )}
              <div className="mt-2 p-2 bg-blue-50 rounded border border-blue-200">
                <p className="text-xs text-blue-800 flex items-center gap-1">
                  <Icon name="Lightbulb" size={12} />
                  <strong>–°–æ–≤–µ—Ç:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–∫–∞–∑—ã –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ
                </p>
              </div>
            </div>

            <div>
              <Label htmlFor="city" className="text-base font-semibold flex items-center gap-2">
                <Icon name="MapPin" size={18} className="text-purple-600" />
                –ì–æ—Ä–æ–¥ (–∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ)
              </Label>
              <Input
                id="city"
                type="text"
                value={formData.city}
                onChange={(e) => {
                  setFormData({ ...formData, city: e.target.value });
                  if (errors.city) setErrors({ ...errors, city: '' });
                }}
                placeholder="–ú–æ—Å–∫–≤–∞"
                className={`mt-2 text-lg ${errors.city ? 'border-red-500' : ''}`}
                disabled={isSubmitting}
              />
              {errors.city && (
                <p className="text-red-600 text-sm mt-1 flex items-center gap-1">
                  <Icon name="XCircle" size={14} />
                  {errors.city}
                </p>
              )}
              <p className="text-xs text-gray-500 mt-1 flex items-center gap-1">
                <Icon name="Info" size={12} />
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ì–æ—Ä–æ–¥ —Ä–∞–±–æ—Ç—ã
              </p>
            </div>

            <div className="pt-4 border-t">
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                <div className="flex items-start gap-2">
                  <Icon name="CheckCircle" size={20} className="text-green-600 flex-shrink-0 mt-0.5" />
                  <div className="text-sm text-green-800">
                    <p className="font-medium mb-1">–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?</p>
                    <p>
                      –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                      –ø–æ <strong>–§–ò–û + –≥–æ—Ä–æ–¥ + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞</strong>.
                      –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥—É—Ç ‚Äî –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                    </p>
                  </div>
                </div>
              </div>

              <Button
                type="submit"
                size="lg"
                className="w-full text-lg"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <Icon name="Loader2" className="mr-2 h-5 w-5 animate-spin" />
                    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <Icon name="Save" className="mr-2 h-5 w-5" />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                  </>
                )}
              </Button>
            </div>
          </form>

          <div className="mt-6 p-3 bg-gray-50 rounded-lg border border-gray-200">
            <p className="text-xs text-gray-600 text-center">
              üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–∞—Ö
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}