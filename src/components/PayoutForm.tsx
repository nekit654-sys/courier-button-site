import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';

const PayoutForm = () => {
  const [formData, setFormData] = useState({
    fullName: '',
    city: '',
    phone: '',
    screenshot: null as File | null
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const { toast } = useToast();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          variant: 'destructive'
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB',
          variant: 'destructive'
        });
        return;
      }

      setFormData(prev => ({
        ...prev,
        screenshot: file
      }));

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
      const reader = new FileReader();
      reader.onload = (event) => {
        setPreviewUrl(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const convertToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = error => reject(error);
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.fullName.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û',
        variant: 'destructive'
      });
      return;
    }

    if (!formData.city.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥',
        variant: 'destructive'
      });
      return;
    }

    if (!formData.phone.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        variant: 'destructive'
      });
      return;
    }

    if (!formData.screenshot) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç',
        variant: 'destructive'
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
      const screenshotBase64 = await convertToBase64(formData.screenshot);

      const requestData = {
        action: 'payout',
        name: formData.fullName,
        phone: formData.phone,
        city: formData.city,
        attachment_data: screenshotBase64
      };

      const response = await fetch('https://functions.poehali.dev/6b2cc30f-1820-4fa4-b15d-fca5cf330fab', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
      }

      toast({
        title: '–£—Å–ø–µ—à–Ω–æ!',
        description: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        fullName: '',
        city: '',
        phone: '',
        screenshot: null
      });
      setPreviewUrl(null);

    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        variant: 'destructive'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader className="text-center">
        <CardTitle className="text-2xl font-bold text-green-600">
          üí∞ –í—ã–ø–ª–∞—Ç–∞ 3000 ‚ÇΩ
        </CardTitle>
        <CardDescription>
          –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="fullName">–§–ò–û *</Label>
            <Input
              id="fullName"
              name="fullName"
              type="text"
              placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
              value={formData.fullName}
              onChange={handleInputChange}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="city">–ì–æ—Ä–æ–¥ *</Label>
            <Input
              id="city"
              name="city"
              type="text"
              placeholder="–ú–æ—Å–∫–≤–∞"
              value={formData.city}
              onChange={handleInputChange}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *</Label>
            <Input
              id="phone"
              name="phone"
              type="tel"
              placeholder="+7 (999) 123-45-67"
              value={formData.phone}
              onChange={handleInputChange}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="screenshot">–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è *</Label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center">
              <input
                id="screenshot"
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                className="hidden"
              />
              <label htmlFor="screenshot" className="cursor-pointer">
                {previewUrl ? (
                  <div className="space-y-2">
                    <img 
                      src={previewUrl} 
                      alt="–ü—Ä–µ–≤—å—é —Å–∫—Ä–∏–Ω—à–æ—Ç–∞" 
                      className="max-w-full h-32 object-contain mx-auto rounded"
                    />
                    <p className="text-sm text-green-600 font-medium">
                      –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω ‚úì
                    </p>
                    <p className="text-xs text-gray-500">
                      –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å
                    </p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    <Icon name="Upload" className="w-8 h-8 mx-auto text-gray-400" />
                    <p className="text-sm text-gray-600">
                      –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    </p>
                    <p className="text-xs text-gray-500">
                      –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, GIF (–¥–æ 5MB)
                    </p>
                  </div>
                )}
              </label>
            </div>
          </div>

          <Button 
            type="submit" 
            className="w-full bg-green-600 hover:bg-green-700"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <Icon name="Loader2" className="w-4 h-4 mr-2 animate-spin" />
                –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
              </>
            ) : (
              <>
                <Icon name="Send" className="w-4 h-4 mr-2" />
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
              </>
            )}
          </Button>

          <div className="text-xs text-gray-500 text-center">
            * –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default PayoutForm;